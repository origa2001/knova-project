name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    name: Build and push image
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.set-lower.outputs.repo }}
    steps:
      - name: Set lowercase repo
        id: set-lower
        run: |
          # GITHUB_REPOSITORY is owner/repo; make it lowercase for container tags
          repo=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          echo "repo=$repo" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python (for running any tests)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install app requirements
        working-directory: ./sample-app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./sample-app/Dockerfile
          push: true
          tags: ghcr.io/${{ steps.set-lower.outputs.repo }}:latest

  deploy-dev:
    name: Deploy to cluster (dev)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Prepare KUBECONFIG (dev)
        run: |
          if [ -z "${{ secrets.KUBECONFIG }}" ]; then
            echo "KUBECONFIG secret not set; skipping deploy"
            exit 0
          fi
          echo "Decoding KUBECONFIG and writing to file"
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Deploy Helm chart
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          helm upgrade --install sample-app helm/sample-app -n sample-app --create-namespace \
            --set image.repository=ghcr.io/${{ needs.build-and-push.outputs.repo }},image.tag=latest

      - name: Run smoke test
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          bash ci/smoke_test.sh sample-app sample-app-sample-app 8080

  kind-deploy:
    name: Deploy to kind (CI-only)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Skip if KUBECONFIG present
        run: |
          if [ -n "${{ secrets.KUBECONFIG }}" ]; then
            echo "KUBECONFIG present; skipping kind deploy"
            exit 0
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Docker
        uses: docker/setup-buildx-action@v2

      - name: Set up kind
        uses: engineerd/setup-kind@v0.5.0

      - name: Create kind cluster
        run: |
          echo "== docker info =="
          docker info || true
          docker version || true
          # try creating the cluster with a modern node image and longer wait; retry once on failure
          kind create cluster --name kind --image kindest/node:v1.27.0 --wait 300s || (
            echo "first attempt failed, retrying after 10s...";
            sleep 10;
            kind create cluster --name kind --image kindest/node:v1.27.0 --wait 300s
          )
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and load built image into kind
        run: |
          IMAGE=ghcr.io/${{ needs.build-and-push.outputs.repo }}:latest
          docker pull $IMAGE
          kind load docker-image $IMAGE --name ci

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Deploy Helm chart to kind
        run: |
          helm upgrade --install sample-app helm/sample-app -n sample-app --create-namespace \
            --set image.repository=ghcr.io/${{ needs.build-and-push.outputs.repo }},image.tag=latest

      - name: Run smoke test (kind)
        run: |
          bash ci/smoke_test.sh sample-app sample-app-sample-app 8080

  deploy-prod:
    name: Deploy to production (requires environment approval)
    needs: build-and-push
    runs-on: ubuntu-latest
  # production environment can be configured in GitHub repo settings for required approvals
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Prepare KUBECONFIG (prod)
        run: |
          if [ -z "${{ secrets.KUBECONFIG_PROD }}" ]; then
            echo "KUBECONFIG_PROD secret not set; skipping prod deploy"
            exit 0
          fi
          echo "Decoding KUBECONFIG_PROD and writing to file"
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 --decode > kubeconfig_prod
          chmod 600 kubeconfig_prod
          echo "KUBECONFIG=$PWD/kubeconfig_prod" >> $GITHUB_ENV

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Deploy Helm chart to production
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          helm upgrade --install sample-app helm/sample-app -n sample-app --create-namespace \
            --set image.repository=ghcr.io/${{ needs.build-and-push.outputs.repo }},image.tag=latest

      - name: Run smoke test (prod)
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          bash ci/smoke_test.sh sample-app sample-app-sample-app 8080
