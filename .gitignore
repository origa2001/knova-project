# Byte-compiled / compiled files
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
.Python
env/
venv/
build/
dist/
*.egg-info/
.eggs/

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage
htmlcov/
.coverage
.tox/
.nox/
.pytest_cache/

# Python virtualenv
.env
.venv
env/
venv/

# VS Code
.vscode/

# macOS
.DS_Store

# Docker
*.log
docker-compose.override.yml
docker-compose.*.yml
**/docker-compose.*.yml
sample-app/.dockerignore

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
crash.log
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Local Terraform variables and creds
terraform.tfvars
*.tfvars
*.tfvars.json

# AWS credentials and kubeconfig
.aws/
.aws/credentials
.aws/config
kubeconfig
kubeconfig_*
.kube/

# Editor files
*.swp
*.swo
*.swn
.idea/

# Logs
*.log

# Secrets
secrets.yaml
*.pem
*.key
# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
.DS_Store
*.tfplan
